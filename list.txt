start	2015-06-22 15:18:21.950729
end	2015-06-22 15:18:32.780061
start	2015-06-22 15:21:34.635384
end	2015-06-22 15:21:37.252467
start	2015-06-22 15:25:52.956387
end	2015-06-22 15:34:13.110614
start	2015-06-22 16:58:37.840697
end	2015-06-22 19:35:35.936431
# Descargué el repo
# Hice funcionar localmente el simulador
# r4653 Add the standard requirements.txt python module dependencies
# r4654 Parche: Creo el uso de la variable de entorno 'HOME_SIMULACIONES'

start	2015-06-26 16:47:32.011509
end	2015-06-26 19:24:53.701352
# Estuve revisando parte de lo que hizo Poli como canal y BCD y generé un reporte IPython notebook

start	2015-06-29 15:06:08.237251
end	2015-06-29 17:44:48.995507
# Estuve armando un test de impulso para el canal y mejorando la velocidad de carga de los coeficientes del filtro utilizando serializers

start 2015-06-30 14:36:50.650563
end	2015-06-30 15:57:54.125023
start	2015-06-30 16:11:36.627271
end	2015-06-30 23:01:34.053835
# He armado el yaml_numpy.py para la serialización eficiente de datos de configuración o logueo. También he creado un reporte yaml_numpy.ipynb

start	2015-07-01 16:53:14.491449
end	2015-07-01 18:09:56.935243
start	2015-07-02 14:43:40.861512
end	2015-07-02 17:05:27.970002
start	2015-07-02 20:05:36.212378
end	2015-07-02 20:11:21.726726
start	2015-07-03 14:46:51.327847
end	2015-07-03 17:06:56.772719
# He correjido la alineación del canal y ...

start	2015-07-04 16:31:32.588551
end	2015-07-04 17:40:35.604663
start 2015-07-04 19:25:44.560044
end   2015-07-04 19:47:43.138303
# He generado de reportes de comparación con lo de la alineación del canal

LAST_REPORT 2015-07-04 19:47:44.00 # Mandé informe semanal

start	2015-07-05 13:28:26.833531
end	2015-07-05 15:11:54.297542
# Copalsé los reportes del canal en uno sólo donde se ve la comparación del antes y después de la corrección. Escribí el informe semanal.

start	2015-07-06 12:20:26.445432
end	2015-07-06 13:45:39.410912
start	2015-07-06 15:29:17.104074
end	2015-07-06 23:55:55.826079
start	2015-07-07 10:34:58.007001
end	2015-07-07 14:03:08.600548
start	2015-07-08 16:05:16.093046
end	2015-07-08 16:40:09.450322
# He hecho la verificación del BCD y corrección de su inicialización y alineación de overlap-save. También hice un test de compensación del canal con el BCD utilizando un downsampler en el medio, para verificar el matching de compensación. Aparte he armado un bloque genérico FastFIR que trabaja con overlap-save configurable en alineación y cantidad de overlap. He integrado el Canal y BCD al SVN.

LAST_REPORT 2015-07-12 13:00:00.00

start	2015-07-12 13:01:56.712801
end	2015-07-12 13:52:25.782035
# He escrito el reporte

start	2015-07-24 15:09:39.146955
end	2015-07-24 19:19:30.877631
start   2015-07-26 20:51:40.753695
end 2015-07-26 21:31:00.922259
# Estuve probando hacer funcionar pypy con numpy y comparando una FFT entre pypy, python, numpy y numba.

LAST_REPORT 2015-07-26 22:37:00.00

start	2015-07-26 22:37:45.489054
end	2015-07-26 23:58:05.275464
# Escribiendo el informe semanal

start	2015-07-27 8:04:01.391408
end	2015-07-27 16:20:17.196072
start	2015-07-27 17:00:31.599909
end	2015-07-27 20:04:25.681774
# Estuve optimizando una fft para poder usarla en pypy
start	2015-07-29 06:33:33.551680
end	2015-07-29 07:44:45.384187
# Seguí con la comparación entre pypy y numba para ffts funcionales (describiendo todas las operaciones matemáticas en un solo paso) y en casi todo los casos numba funciona mejor pypy pero pypy tiene un caso de fft de 32 muestras que anda un poco más rápido que Numba. Numba logra optimizar FFTs funcionales de 1K cerca del rendimiento de Numpy pero demora varios minutos en optimizar el código con el JIT, en cambio Pypy lo otimiza rápido pero funciona lento (sólo un poco más rápido que CPython).

start	2015-07-30 14:22:50.721793
end	2015-07-30 19:11:01.515450
start	2015-07-31 01:59:39.461471
end	2015-07-31 12:58:57.683191
start	2015-07-31 3:49:00.211607
# En base al análisis hecho del rendimiento de cada caso (Pypy o Numba) para cada rango de tamaño de FFT he armado módulo `fft_auto.py` que importa la mejor versión disponible para el caso y elije el caso particular según el tamaño de FFT.

start   2015-07-31 14:22:50.721793
end	2015-07-31 17:07:52.249683
start	2015-08-03 15:15:22.564982
end	2015-08-03 18:04:45.779532
start	2015-08-03 18:20:31.318007
end	2015-08-03 18:25:02.095675
start	2015-08-03 22:40:07.688504
end	2015-08-04 02:16:09.749080
start	2015-08-05 14:14:26.831504
end	2015-08-05 17:38:13.112505
# He reescrito los reportes de IPython Notebook, limpiado y dejando más coherente la comparación entre los casos para FFTs.


LAST_REPORT	2015-08-05 17:39:38.480824

start	2015-08-05 17:39:41.801141
end	2015-08-05 19:36:47.903239
start	2015-08-05 21:27:12.551743
end	2015-08-05 21:33:02.609415
start	2015-08-05 23:42:06.189825
end	2015-08-06 00:56:41.841945
# He agregado Testing a las FFTs y corregido un bug en FFTHardGenerator


